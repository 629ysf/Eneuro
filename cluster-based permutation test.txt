cd('D:\7_clean\power_base')
clear; close all
id = {'1','3','4','5','6','7','9','10','11','14','15','16','17','18','20','21',... 
    '22','23','24','25','26','28','29','31','32','33','35','36','37','38','39','40','43',...
    '45','46','47','52','54','57','58','59','61',...
    '64','65','66','67','69','72','73','74','77','78','79','82','84','85',...
   '86','87','88','89','91','94','95','96','97','98','99','101','102','103','104','105','108',...
     '109','110','112','113','114','115','116','117','118','119','120', '121','122','124','125','126','127',...
    '150','201'};  % 被试编号 
Ns = length(id);
allsub = cell(1,Ns);
for subi=1:Ns    
    load(['pow_base' id{subi} 'relchange' '.mat']);
    power_base.time = power_base.time(53:88);
    power_base.powspctrm = power_base.powspctrm(:,:,53:88);
    allsubA{1,subi} = power_base;
end 
for subi=1:Ns    
    load(['pow_base' id{subi} 'relchange' '.mat']);
    power_base.time = allsubA{1,subi}.time;
    power_base.powspctrm = power_base.powspctrm(:,:,12:47);
    allsubB{1,subi} = power_base;
end 
for subi=1:Ns    
    load(['pow_base' id{subi} 'relchange' '.mat']);
    allsub{1,subi} = power_base;
end 
cfg = [];
cfg.channel   = 'all';
cfg.toilim    = 'all';
cfg.foilim    = 'all';
pow_grand = ft_freqgrandaverage(cfg, allsub{:});

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%  non-parametric cluster-based permutation test  %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% prepare neighbors
cfg = [];
cfg.method      = 'triangulation'; % try 'distance' as well
cfg.layout      = 'C:\wang\ft_template\NeuroScan_quickcap64_layout.lay';                      % specify layout of sensors*
cfg.feedback    = 'no';                             % show a neighbour plot 
neighbours      = ft_prepare_neighbours(cfg, pow_grand); % define neighbouring channels

cfg = [];
cfg.neighbours       = neighbours;
cfg.minnbchan        = 2;  
cfg.channel          = {'all','-HEOG','-VEOG'};
cfg.avgoverchan      = 'no';
cfg.latency          = [0.04 0.74];     % in second
cfg.avgovertime      = 'no'; 
cfg.frequency        = 10;
cfg.avgoverfreq      = 'no'; 
cfg.method           = 'montecarlo';
cfg.statistic        = 'depsamplesT';
cfg.correctm         = 'cluster';
cfg.clustertail      = 0;           % alpha level of the sample-specific test statistic
cfg.clusteralpha     = 0.025;
cfg.clusterstatistic = 'maxsum';
cfg.tail             = 0;
cfg.alpha            = 0.05;        % alpha level of the permutation test
cfg.numrandomization = 1000;

cfg.design(1,1:2*Ns)  = [ones(1,Ns) 2*ones(1,Ns)];
cfg.design(2,1:2*Ns)  = [1:Ns 1:Ns];
cfg.ivar                = 1; % the 1st row in cfg.design contains the independent variable
cfg.uvar                = 2; % the 2nd row in cfg.design contains the subject number
stat = ft_freqstatistics(cfg,allsubA{:},allsubB{:});
save('D:\7_clean\power_result.mat','stat') 

cfg = [];
cfg.alpha  = 0.025;
cfg.parameter = 'stat';
cfg.zlim   = [-4 4];
cfg.layout = 'easycapM11.mat';
ft_clusterplot(cfg, stat);
%Find the electrode point
d = stat.negclusterslabelmat==1; 
points1 = squeeze(sum(d,1));   
points2 = squeeze(sum(d,2));    
